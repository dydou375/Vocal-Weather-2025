import multiprocessing
import os
import threading
import time
import pandas as pd
import streamlit as st
import requests
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from dotenv import load_dotenv
import datetime



#---------------------- Definition des fonctions FastAPI ---------------------------------
#load_dotenv(r"Vocal_Weather\var.env")

# Lancer l'application FastAPI
# uvicorn app.main:app --reload



#---------------------------------- Fonction pour obtenir la reconnaissance ----------------------------------
def get_reconnaissance():
    res = requests.get("http://localhost:8000/reconnaissance", params={})
    try:
        return res.json()
    except requests.exceptions.JSONDecodeError:
        st.error("Erreur lors de la d√©codage de la r√©ponse JSON. La r√©ponse de l'API est vide ou mal form√©e.")
        return None

#---------------------------------- Fonction pour extraire les entit√©s ----------------------------------
def extract_entities(text):
    res = requests.get("http://localhost:8000/extraction_entites", params={"text": text})
    return res.json()

#---------------------------------- Fonction pour extraire les entit√©s ville ----------------------------------
def extract_entities_ville(text):
    res = requests.get("http://localhost:8000/extraction_entites_ville", params={"text": text})
    
    # V√©rification de la validit√© de la r√©ponse
    if res.status_code != 200:
        st.error(f"Erreur lors de la requ√™te : {res.status_code}")
        return None
    
    try:
        return res.json()
    except requests.exceptions.JSONDecodeError:
        st.error("Erreur de d√©codage JSON : la r√©ponse n'est pas valide ou est vide.")
        return None

# Fonction pour extraire les entit√©s jours
def extract_entities_jours(text):
    res = requests.get("http://localhost:8000/extraction_entites_jours", params={"text": text})
    return res.json()

#---------------------------------- Fonction pour obtenir les pr√©visions m√©t√©orologiques ----------------------------------
def get_weather_forecast(city_name):
    res = requests.get("http://localhost:8000/meteo_prevision", params={"city_name": city_name})
    
    # V√©rification de la validit√© de la r√©ponse
    if res.status_code != 200:
        st.error(f"Erreur lors de la requ√™te : {res.status_code}")
        return None
    try:
        return res.json()
    except requests.exceptions.JSONDecodeError:
        st.error("Erreur de d√©codage JSON : la r√©ponse n'est pas valide ou est vide.")
        return None
    
def get_daily_weather_forecast(city_name):
    res = requests.get("http://localhost:8000/meteo_prevision_journaliere", params={"city_name": city_name})
    if res.status_code != 200:
        st.error(f"Erreur lors de la requ√™te : {res.status_code}")
        return None
    try:
        return res.json()
    except requests.exceptions.JSONDecodeError:
        st.error("Erreur de d√©codage JSON : la r√©ponse n'est pas valide ou est vide.")
        return None

#---------------------- Interface Streamlit V1 ---------------------------------

st.title("Application de pr√©vision m√©t√©orologique (Open-Meteo)")
mode = st.radio("S√©lectionnez le mode de commande :", ("Enregistrement par micro", "text", "Manuelle"))

transcription_input = ""
forecast_days_input = None
audio_bytes = None

if "forecast_response" not in st.session_state:
    st.session_state["forecast_response"] = None


if mode != "Enregistrement par micro":
    forecast_days_input = st.selectbox("Nombre de jours de pr√©vision", options=[1,2,3,4,5,6,7], index=2)
else:
    forecast_days_input = 7

if mode == "Enregistrement par micro":
    st.subheader("Commande vocale via microphone")
    if st.button("Enregistrer la commande vocale"):
        st.info("Veuillez parler maintenant...")
        command_vocal = get_reconnaissance()
        if command_vocal == None:
            st.error("Aucune commande reconnue.")
        else:
            st.session_state.micro_transcription = command_vocal
    if "micro_transcription" in st.session_state and st.session_state.micro_transcription:
        st.write("Transcription obtenue :", st.session_state.micro_transcription)
        city_input = extract_entities(st.session_state.micro_transcription)
        if st.button("Envoyer la commande vocale"):
            meteo_data = get_weather_forecast(city_input)
            meteo_data_journaliere = get_daily_weather_forecast(city_input)
            if meteo_data:
                st.session_state.forecast_response = meteo_data
                st.session_state.forecast_response_journaliere = meteo_data_journaliere
                st.success(f"Pr√©vision pour {city_input}")
            else:
                st.error("Erreur lors de la r√©cup√©ration des donn√©es m√©t√©orologiques.")
elif mode == "Manuelle":
    st.subheader("Commande manuelle")
    city_input = st.text_input("Ville")
    if st.button("Envoyer la commande"):
        meteo_data = get_weather_forecast(city_input)
        meteo_data_journaliere = get_daily_weather_forecast(city_input)
        if meteo_data:
            st.session_state.forecast_response = meteo_data
            st.session_state.forecast_response_journaliere = meteo_data_journaliere
            st.success(f"Pr√©vision pour {city_input}")
else:
    text = st.text_area("Veuillez ecrire ce que vous souhaitez faire")
    ville = extract_entities_ville(text)
    jours = extract_entities_jours(text)
    st.write(f"Ville: {ville}")
    st.write(f"Jours: {jours}")
    if st.button("Envoyer la commande"):
        meteo_data = get_weather_forecast(ville)
        meteo_data_journaliere = get_daily_weather_forecast(ville)
        if meteo_data:
            st.session_state.forecast_response = meteo_data
            st.session_state.forecast_response_journaliere = meteo_data_journaliere
            st.success(f"Pr√©vision pour {ville} pour {jours} jours")
        
#---------------------------------- Affichage des r√©sultats (12 heures) ---------------------------------
if st.session_state.forecast_response:
    tab1, tab2, tab3, tab4 = st.tabs(["afficher les r√©sultats sous forme de graphique", "afficher les r√©sultats sous forme de tableau", "afficher les r√©sultats sous forme de texte", "afficher les r√©sultats par heure"])
    meteo_data = st.session_state.forecast_response
    # Convertir meteo_data en DataFrame
    df_meteo = pd.DataFrame(meteo_data)

    # Convertir la colonne 'date' en type datetime
    df_meteo['date'] = pd.to_datetime(df_meteo['date'])

    df_filtered = df_meteo[df_meteo['date'].dt.hour == 12].sort_values(by='date').head(forecast_days_input)
    
    with tab1:
        st.subheader("Pr√©visions de la journ√©e")
        if st.session_state.forecast_response_journaliere and st.session_state.forecast_response:
            #---------------------------------- Pr√©visions de la journ√©e ---------------------------------
            jour_selectionne = st.radio("S√©lectionnez la journ√©e si vous voulez afficher les pr√©visions de la journ√©e:",options=["Donn√©es g√©n√©rales","Donn√©es d√©taill√©es"])
            # Assurez-vous que meteo_data est d√©fini
            if jour_selectionne == "Donn√©es g√©n√©rales":
                meteo_data_journaliere = st.session_state.forecast_response_journaliere
                df_meteo_journaliere = pd.DataFrame(meteo_data_journaliere)
                df_meteo_journaliere['date'] = pd.to_datetime(df_meteo_journaliere['date'])
                
                # Obtenir toutes les dates disponibles
                available_dates = df_meteo_journaliere['date'].dt.strftime('%Y-%m-%d').unique()
                
                # S√©lecteur de dates multiples
                selected_dates = st.multiselect("S√©lectionnez les dates √† afficher :", available_dates, default=available_dates)
                
                # Filtrer les donn√©es pour les dates s√©lectionn√©es
                df_selected = df_meteo_journaliere[df_meteo_journaliere['date'].dt.strftime('%Y-%m-%d').isin(selected_dates)]
                
                for index, row in df_selected.iterrows():
                    date = row['date'].strftime('%Y-%m-%d')
                    temperature_min = row['temperature_min']
                    temperature_max = row['temperature_max']
                    sunrise = datetime.datetime.strptime(row['sunrise'], '%Y-%m-%dT%H:%M').strftime('%H:%M')
                    sunset = datetime.datetime.strptime(row['sunset'], '%Y-%m-%dT%H:%M').strftime('%H:%M')
                    windspeed_max = row['windspeed_10m_max']
                    windspeed_min = row['windspeed_10m_min']
                    
                    # Utilisation d'ic√¥nes g√©n√©riques
                    temperature_icon = "üå°Ô∏è"
                    wind_icon = "üí®"
                    sunrise_icon = "üåÖ"
                    sunset_icon = "üåá"

                    # Afficher les informations avec les ic√¥nes
                    st.write(f"**{date}**")
                    st.write(f" {temperature_icon}Temp√©rature min: {temperature_min}¬∞C,  {temperature_icon} Temp√©rature max: {temperature_max}¬∞C")
                    st.write(f" {wind_icon}Vent min: {windspeed_min} km/h, {wind_icon} Vent max: {windspeed_max} km/h ")
                    st.write(f" {sunrise_icon}Lever de soleil: {sunrise}, {sunset_icon} Coucher de soleil: {sunset}")
                    st.write("---")
            
            #---------------------------------- Pr√©vision de la journ√©e with hourly ---------------------------------
            if jour_selectionne == "Donn√©es d√©taill√©es":
                fig = make_subplots(rows=2, cols=2, shared_xaxes=True, vertical_spacing=0.08,
                                    subplot_titles=(f"Temp√©rature (¬∞C)", f"Pr√©cipitations (mm)", f"N√©bulosit√© (%)", f"Vent (km/h)"))
                fig.add_trace(go.Scatter(x=df_filtered['date'], y=df_filtered['temperature_2m'],
                                        mode='lines+markers', marker=dict(color='red')), row=1, col=1)
                fig.add_trace(go.Scatter(x=df_filtered['date'], y=df_filtered['precipitation'],
                                        mode='lines+markers', marker=dict(color='blue')), row=1, col=2)
                fig.add_trace(go.Scatter(x=df_filtered['date'], y=df_filtered['cloudcover'],
                                        mode='lines+markers', marker=dict(color='blue')), row=2, col=1)
                fig.add_trace(go.Scatter(x=df_filtered['date'], y=df_filtered['windspeed_10m'],
                                        mode='lines+markers', marker=dict(color='green')), row=2, col=2)
                fig.update_layout(height=600, title=f"Pr√©visions de Midi sur {forecast_days_input} jours", showlegend=False)
                st.plotly_chart(fig, use_container_width=True)

    with tab2:
        st.subheader("D√©tails des pr√©visions")
        st.dataframe(df_filtered[['date', 'temperature_2m', 'precipitation', 'cloudcover', 'windspeed_10m', 'pm2_5']].rename(
            columns={
                "date": "Date",
                "temperature_2m": "Temp√©rature (¬∞C)",
                "precipitation": "Pr√©cipitations (mm)",
                "cloudcover": "N√©bulosit√© (%)",
                "windspeed_10m": "Vent (km/h)",
                "pm2_5": "Pollution (¬µg/m¬≥)"
            }
        ))

    with tab3:
        st.subheader("D√©tails des pr√©visions")
        
        # Assurez-vous que meteo_data est d√©fini
        meteo_data = st.session_state.forecast_response
        
        # Convertir meteo_data en DataFrame
        df_meteo = pd.DataFrame(meteo_data)
        df_meteo['date'] = pd.to_datetime(df_meteo['date'])
        
        # Filtrer les donn√©es pour ne garder que les enregistrements de midi
        df_filtered = df_meteo[df_meteo['date'].dt.hour == 12]
        
        # Afficher toutes les pr√©visions
        for index, row in df_filtered.iterrows():
            date = row['date'].strftime('%Y-%m-%d')
            temperature = row['temperature_2m']
            precipitation = row['precipitation']
            cloudcover = row['cloudcover']
            windspeed = row['windspeed_10m']
            pm2_5 = row['pm2_5']
            
            # D√©terminer les ic√¥nes
            weather_icon = "‚òÅÔ∏è" if cloudcover > 75 else "üå•Ô∏è" if cloudcover > 50 else "‚õÖ" if cloudcover > 25 else "‚òÄÔ∏è"
            precipitation_icon = "üåßÔ∏è" if precipitation > 20 else "üå¶Ô∏è" if precipitation > 5 else "üåÇ" if precipitation > 0 else "‚òÇÔ∏è"
            wind_icon = "üí®" if windspeed > 50 else "üå¨Ô∏è" if windspeed > 20 else "üçÉ"
            pollution_icon = "üå´Ô∏è" if pm2_5 > 50 else "üå´Ô∏è" if pm2_5 > 20 else "üå≥"
            temperature_icon = "üî•" if temperature > 30 else "üåû" if temperature > 20 else "üå§Ô∏è"

            # Afficher les informations avec les ic√¥nes
            st.write(f"**{date}**")
            st.write(f"Temp√©rature : {temperature}¬∞C {temperature_icon}")
            st.write(f"Pr√©cipitations : {precipitation} mm {precipitation_icon}")
            st.write(f"N√©bulosit√© : {cloudcover}% {weather_icon}")
            st.write(f"Vent : {windspeed} km/h {wind_icon}")
            st.write(f"Pollution : {pm2_5} ¬µg/m¬≥ {pollution_icon}")
            st.write("---")

        # Ajout d'un s√©lecteur de date
        dates = df_filtered['date'].dt.strftime('%Y-%m-%d').unique()
        selected_date = st.radio("S√©lectionnez une date pour afficher les pr√©visions d√©taill√©es :", dates)

        # Filtrer les donn√©es pour la date s√©lectionn√©e
        selected_data = df_filtered[df_filtered['date'].dt.strftime('%Y-%m-%d') == selected_date]

        # Afficher les informations pour la date s√©lectionn√©e
        if not selected_data.empty:
            row = selected_data.iloc[0]
            date = row['date'].strftime('%Y-%m-%d')
            temperature = row['temperature_2m']
            precipitation = row['precipitation']
            cloudcover = row['cloudcover']
            windspeed = row['windspeed_10m']
            pm2_5 = row['pm2_5']
            
            # Afficher les informations d√©taill√©es avec les ic√¥nes
            st.write(f"**D√©tails pour {date}**")
            st.write(f"Temp√©rature : {temperature}¬∞C {temperature_icon}")
            st.write(f"Pr√©cipitations : {precipitation} mm {precipitation_icon}")
            st.write(f"N√©bulosit√© : {cloudcover}% {weather_icon}")
            st.write(f"Vent : {windspeed} km/h {wind_icon}")
            st.write(f"Pollution : {pm2_5} ¬µg/m¬≥ {pollution_icon}")

#---------------------------------- Affichage des r√©sultats (par heure) ---------------------------------
    with tab4:
        if st.session_state.forecast_response:
            # Assurez-vous que meteo_data est d√©fini
            meteo_data = st.session_state.forecast_response

            # Convertir meteo_data en DataFrame
            df_meteo = pd.DataFrame(meteo_data)

            # Convertir la colonne 'date' en type datetime
            df_meteo['date'] = pd.to_datetime(df_meteo['date'])

            # Filtrer les donn√©es pour toutes les heures disponibles
            df_filtered = df_meteo.sort_values(by='date').head(forecast_days_input * 24)  # Supposant 24 heures par jour

            # Ajout d'un s√©lecteur d'heure
            available_hours = df_filtered['date'].dt.strftime('%Y-%m-%d %H:%M').unique()
            selected_hour = st.selectbox("S√©lectionnez une heure pour afficher les pr√©visions :", available_hours)

            # Filtrer les donn√©es pour l'heure s√©lectionn√©e
            selected_data = df_filtered[df_filtered['date'].dt.strftime('%Y-%m-%d %H:%M') == selected_hour]

            # Afficher les informations pour l'heure s√©lectionn√©e
            if not selected_data.empty:
                row = selected_data.iloc[0]
                temperature = row['temperature_2m']
                precipitation = row['precipitation']
                cloudcover = row['cloudcover']
                windspeed = row['windspeed_10m']
                pm2_5 = row['pm2_5']

                st.write(f"**{selected_hour}**")
                st.write(f"Temp√©rature : {temperature}¬∞C {temperature_icon}")
                st.write(f"Pr√©cipitations : {precipitation} mm {precipitation_icon}")
                st.write(f"N√©bulosit√© : {cloudcover}% {weather_icon}")
                st.write(f"Vent : {windspeed} km/h {wind_icon}")
                st.write(f"Pollution : {pm2_5} ¬µg/m¬≥ {pollution_icon}")

            fig = make_subplots(rows=2, cols=2, shared_xaxes=True, vertical_spacing=0.08,
                                subplot_titles=(f"Temp√©rature (¬∞C) {temperature_icon}", f"Pr√©cipitations (mm) {precipitation_icon}", f"N√©bulosit√© (%) {weather_icon}", f"Vent (km/h) {wind_icon}"))
            fig.add_trace(go.Scatter(x=df_filtered['date'], y=df_filtered['temperature_2m'],
                                     mode='lines+markers', marker=dict(color='red')), row=1, col=1)
            fig.add_trace(go.Scatter(x=df_filtered['date'], y=df_filtered['precipitation'],
                                     mode='lines+markers', marker=dict(color='blue')), row=1, col=2)
            fig.add_trace(go.Scatter(x=df_filtered['date'], y=df_filtered['cloudcover'],
                                     mode='lines+markers', marker=dict(color='blue')), row=2, col=1)
            fig.add_trace(go.Scatter(x=df_filtered['date'], y=df_filtered['windspeed_10m'],
                                     mode='lines+markers', marker=dict(color='green')), row=2, col=2)
            fig.update_layout(height=800, title=f"Pr√©visions horaires sur {forecast_days_input} jours", showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
